// <auto-generated />
using System;
using EF_Core_Platform_Lecture.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF_Core_Platform_Lecture.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200819172258_AddedMany2ManyModels")]
    partial class AddedMany2ManyModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.M2M_Magazine", b =>
                {
                    b.Property<int>("M2M_MagazineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("M2M_Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("M2M_MagazineId");

                    b.ToTable("M2M_Magazines");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.M2M_Person", b =>
                {
                    b.Property<int>("M2M_PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("M2M_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("M2M_PersonId");

                    b.ToTable("M2M_Persons");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.M2M_Subscription", b =>
                {
                    b.Property<int>("M2M_SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("M2M_MagazineId")
                        .HasColumnType("int");

                    b.Property<int>("M2M_PersonId")
                        .HasColumnType("int");

                    b.HasKey("M2M_SubscriptionId");

                    b.HasIndex("M2M_MagazineId");

                    b.HasIndex("M2M_PersonId");

                    b.ToTable("M2M_Subscriptions");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.Monster", b =>
                {
                    b.Property<int>("MonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MonsterId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.M2M_Subscription", b =>
                {
                    b.HasOne("EF_Core_Platform_Lecture.Models.M2M_Magazine", "M2M_Magazine")
                        .WithMany("M2M_Readers")
                        .HasForeignKey("M2M_MagazineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Platform_Lecture.Models.M2M_Person", "M2M_Person")
                        .WithMany("M2M_Subscriptions")
                        .HasForeignKey("M2M_PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core_Platform_Lecture.Models.Message", b =>
                {
                    b.HasOne("EF_Core_Platform_Lecture.Models.User", "Creator")
                        .WithMany("CreatedMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
